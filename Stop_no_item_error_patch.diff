diff --git a/MIDI Editor/MIDI Ex Machina/RobU - MIDI Ex Machina.lua b/MIDI Editor/MIDI Ex Machina/RobU - MIDI Ex Machina.lua
index 1e38c54..da244f3 100644
--- a/MIDI Editor/MIDI Ex Machina/RobU - MIDI Ex Machina.lua	
+++ b/MIDI Editor/MIDI Ex Machina/RobU - MIDI Ex Machina.lua	
@@ -57,7 +57,7 @@ local p = require 'persistence' -- currently unused, i.e. no preset save, load,
 --------------------------------------------------------------------------------
 m = {} -- all ex machina data
 -- user changeable defaults are marked with "(option)"
-m.debug = false
+m.debug = true
 m.OS = reaper.GetOS()
 -- window
 m.win_title = "RobU : MIDI Ex Machina - v1.3.4"; m.win_dockstate = 0
@@ -359,7 +359,7 @@ local function UndoNoteBuf()
 	end
 end
 
-local function PurgeNoteBuf()
+local function PurgeNoteBuf(idx)
 -- PurgeNoteBuf() - purge all note buffers from current+1 to end
 	local debug = false
 	if debug or m.debug then
@@ -383,25 +383,26 @@ function GetItemLength()
 	local debug = false
 	if debug or m.debug then ConMsg("GetItemLength()") end
 
-		mItem = reaper.GetSelectedMediaItem(0, 0)
-		mItemLen = reaper.GetMediaItemInfo_Value(mItem, "D_LENGTH")
-		mBPM, mBPI = reaper.GetProjectTimeSignature2(0)
-		msPerMin = 60000
-		msPerQN = msPerMin / mBPM
-		numQNPerItem = (mItemLen * 1000) / msPerQN
-		numBarsPerItem = numQNPerItem / 4
-		ItemPPQN = numQNPerItem * m.ppqn
-		if debug or m.debug then
-			ConMsg("ItemLen (ms)    = " .. mItemLen)
-			ConMsg("mBPM            = " .. mBPM)
-			ConMsg("MS Per QN       = " .. msPerQN)
-			ConMsg("Num of QN       = " .. numQNPerItem)
-			ConMsg("Num of Bar      = " .. numBarsPerItem)
-			ConMsg("Item size ppqn  = " .. ItemPPQN .. "\n")
-		end
-		mItemTake = reaper.GetTake(mItem, 0) -- should fix looped items
-		ItemPPQN = reaper.BR_GetMidiSourceLenPPQ(mItemTake) -- thanks Thrash!
-		return ItemPPQN
+		--mItem = reaper.GetSelectedMediaItem(0, 0)
+			mItemLen = reaper.GetMediaItemInfo_Value(m.mItem, "D_LENGTH")
+			mBPM, mBPI = reaper.GetProjectTimeSignature2(0)
+			msPerMin = 60000
+			msPerQN = msPerMin / mBPM
+			numQNPerItem = (mItemLen * 1000) / msPerQN
+			numBarsPerItem = numQNPerItem / 4
+			ItemPPQN = numQNPerItem * m.ppqn
+			if debug or m.debug then
+				ConMsg("ItemLen (ms)    = " .. mItemLen)
+				ConMsg("mBPM            = " .. mBPM)
+				ConMsg("MS Per QN       = " .. msPerQN)
+				ConMsg("Num of QN       = " .. numQNPerItem)
+				ConMsg("Num of Bar      = " .. numBarsPerItem)
+				ConMsg("Item size ppqn  = " .. ItemPPQN .. "\n")
+			end
+			mItemTake = reaper.GetTake(m.mItem, 0) -- should fix looped items
+			ItemPPQN = reaper.BR_GetMidiSourceLenPPQ(mItemTake) -- thanks Thrash!
+			return ItemPPQN
+
 end
 
 function GetReaperGrid(gridRad)
@@ -447,7 +448,7 @@ end
 -- GetNotesFromTake() - fill a note buffer from the active take
 --------------------------------------------------------------------------------
 function GetNotesFromTake()
-	local debug = false
+	local debug = true
 	if debug or m.debug then ConMsg("GetNotesFromTake()") end
 	local i, t
 	if m.activeTake then
@@ -468,6 +469,7 @@ function GetNotesFromTake()
 				t[i][8] = velocity
 			end -- for i				
 		end -- num_notes
+		PrintNotes(GetNoteBuf())
 	else -- no active take
 		if debug or m.debug then ConMsg("No Active Take") end
 	end -- m.activeTake
@@ -855,26 +857,7 @@ function GenNoteAttributes(accF, accProbTable, accSlider, legF, legProbTable)
 	PurgeNoteBuf()
 	InsertNotes()
 end
---------------------------------------------------------------------------------
--- SetNotes - arg notebuf t1; set notes in the active take
---------------------------------------------------------------------------------
-function SetNotes()
-	local debug = false
-	if debug or m.debug then ConMsg("SetNotes()") end
-	local i = 1
-	if m.activeTake then
-		local t1 = GetNoteBuf()
-		while t1[i] do
-			reaper.MIDI_SetNote(m.activeTake, i-1, t1[i][1], t1[i][2], t1[i][3], t1[i][4], t1[i][6], t1[i][7], t1[i][8], __)
-			--1=selected, 2=muted, 3=startppq, 4=endppq, 5=len, 6=chan, 7=pitch, 8=vel, noSort)		
-			i = i + 1
-		end -- while t1[i]
-		reaper.MIDI_Sort(m.activeTake)
-		reaper.MIDIEditor_OnCommand(m.activeEditor, 40435) -- all notes off
-	else
-		if debug or m.debug then ConMsg("No Active Take") end
-	end -- m.activeTake
-end
+
 --------------------------------------------------------------------------------
 -- InsertNotes(note_buffer) - insert notes in the active take
 --------------------------------------------------------------------------------
@@ -883,7 +866,7 @@ function InsertNotes()
 	if debug or m.debug then ConMsg("\nInsertNotes()") end
 	DeleteNotes()
 	local i = 1
-	if m.activeTake then
+	if m.activeTake and m.mItem then
 		local noteLength = 0
 		local gridSize = m.reaGrid * m.ppqn
 		local itemLength = GetItemLength()	
@@ -926,33 +909,14 @@ function InsertNotes()
 		if debug or m.debug then ConMsg("No Active Take") end
 	end -- m.activeTake
 end
---------------------------------------------------------------------------------
--- InsertNotes(note_buffer) - insert notes in the active take
---------------------------------------------------------------------------------
-function InsertNotesOld()
-	local debug = false
-	if debug or m.debug then ConMsg("InsertNotes()") end
-	DeleteNotes()
-	local i = 1
-	if m.activeTake then
-		local t1 = GetNoteBuf()
-		while t1[i] do
-			reaper.MIDI_InsertNote(m.activeTake, t1[i][1], t1[i][2], t1[i][3], t1[i][4], t1[i][6], t1[i][7], t1[i][8], false)
-			--1=selected, 2=muted, 3=startppq, 4=endppq, 5=len, 6=chan, 7=pitch, 8=vel, noSort)		
-			i = i + 1
-		end -- while t1[i]
-		reaper.MIDI_Sort(m.activeTake)
-		reaper.MIDIEditor_OnCommand(m.activeEditor, 40435) -- all notes off
-	else
-		if debug or m.debug then ConMsg("No Active Take") end
-	end -- m.activeTake
-end
+
 --------------------------------------------------------------------------------
 -- PrintNotes - arg note_buffer t; print note_buffer to reaper console
 --------------------------------------------------------------------------------
 function PrintNotes(t) -- debug code
 	local debug = false
 	if debug or m.debug then ConMsg("PrintNotes()") end
+	if not t then return end	
 	local i = 1
 	local str = "sel \t mut \t s_ppq \t e_ppq \t leng \t chan \t pitch \t vel \n"
 	while t[i] do
@@ -991,7 +955,10 @@ function ShowMessage(tb, msgNum)
 		tb.label = ""
 	elseif msgNum == 1 then 
 		tb.tab = 0
-		tb.label = "No Active Take" 
+		tb.label = "MIDI Editor Closed" 
+	elseif msgNum == 2 then
+		tb.tab = 0
+		tb.label = "Please select a MIDI Item in the Arrange Window"
 	end
 	e.gScaleState = true
 end
@@ -1300,7 +1267,7 @@ end
 randomBtn.onLClick = function()
 	local debug = false
 	if debug or m.debug then ConMsg("\nrandomBtn.onLClick()") end
-	if m.activeTake then
+	if m.activeTake and m.mItem then
 		m.seqShift = 0; m.seqShiftMin = 0; m.seqShiftMax = 0 -- reset shift
 		seqShiftVal.label = tostring(m.seqShift)
 		GenProbTable(m.preNoteProbTable, t_noteSliders, m.noteProbTable)
@@ -1470,7 +1437,7 @@ end
 sequenceBtn.onLClick = function()
 	local debug = false
 	if debug or m.debug then ConMsg("\nsequenceBtn.onLClick()") end
-	if m.activeTake then 
+	if m.activeTake and m.mItem then 
 			m.seqShift = 0; m.seqShiftMin = 0; m.seqShiftMax = 0 -- reset shift on new sequence
 			seqShiftVal.label = tostring(m.seqShift)	
 		if m.seqF then
@@ -1589,6 +1556,7 @@ seqGridRad.onLClick = function() -- change grid size
 end
 -- Sequencer shift left
 seqShiftLBtn.onLClick = function()
+	if not m.mItem then return end
 	local gridSize = m.reaGrid * m.ppqn
 	local itemLength = GetItemLength()
 	m.seqShiftMin = -(math.floor(itemLength / gridSize)-1)
@@ -1602,6 +1570,7 @@ seqShiftLBtn.onLClick = function()
 end
 -- Sequencer shift right
 seqShiftRBtn.onLClick = function()
+	if not m.mItem then return end
 	local gridSize = m.reaGrid * m.ppqn
 	local itemLength = GetItemLength()
 	m.seqShiftMax = math.floor(itemLength / gridSize) - 1
@@ -1800,7 +1769,7 @@ end
 euclidBtn.onLClick = function()
 	local debug = false
 	if debug or m.debug then ConMsg("\neuclidBtn.onLClick()") end
-	if m.activeTake then
+	if m.activeTake and m.mItem then
 		if m.eucF then
 			if debug or m.debug then ConMsg("m.eucF = " .. tostring(m.eucF)) end
 			GenAccentTable(m.accProbTable, seqAccRSldr, seqAccProbSldr)
@@ -1981,8 +1950,8 @@ function InitMidiExMachina()
 	SetDefaultSeqOptions(); SetDefaultSeqShift()
 	SetDefaultSeqGridSliders(); SetDefaultAccLegSliders()
 	SetDefaultEucOptions(); SetDefaultEucSliders()
-
-	GetItemLength()
+	m.mItem = reaper.GetSelectedMediaItem(0, 0)
+	--GetItemLength()
 	GetNotesFromTake() -- grab the original note data (if any...)
 	if debug or m.debug then ConMsg("End InitMidiExMachina()\n") end
 end
@@ -2053,41 +2022,58 @@ function MainLoop()
 	-- Update Reaper GFX
 	gfx.update()
 	
-	-- check for midi editor and take
-	m.activeEditor = reaper.MIDIEditor_GetActive()
-	if m.activeEditor then
-		m.activeTake = reaper.MIDIEditor_GetTake(m.activeEditor)
-		if m.activeTake then
-			ShowMessage(msgText, 0) -- clear old messages
-			-- check for changes in the active take if the "Permute" scale is selected
-			if scaleDrop.val2[scaleDrop.val1] == "Permute" then 
-				__, pHash = reaper.MIDI_GetHash(m.activeTake, false, 0)
-				if m.pHash ~= pHash then
-					SetScale("Permute", m.scales, m.preNoteProbTable)
-					UpdateSliderLabels(t_noteSliders, m.preNoteProbTable)
-					m.pHash = pHash
-				end -- m.pHash
-				-- don't allow any note options that might upset permute...
-				noteOptionsCb.val1[2] = 0; m.rndFirstNoteF = false
-				noteOptionsCb.val1[3] = 0; m.rndOctX2F     = false 
-			end -- scaleDrop   
-			-- check for grid changes
-			local grid = m.reaGrid
-			m.reaGrid, __, __ = reaper.MIDI_GetGrid(m.activeTake)
-			if grid ~= m.reaGrid then 
-				GetReaperGrid(seqGridRad)
-				seqGridRad.onLClick() -- update the sequence grid sizes
-			end -- grid
-		else -- handle m.activeTake error
-			ShowMessage(msgText, 1) 
+	-- check for selected item, midi editor and take
+	m.lmItem = m.mItem
+	m.mItem = reaper.GetSelectedMediaItem(0, 0)
+	if m.mItem then
+		if m.mItem ~= m.lmItem then 
+			m.mItemNew = true
+			m.seqShift = 0; m.seqShiftMin = 0; m.seqShiftMax = 0
+			seqShiftVal.label = tostring(m.seqShift)
+			m.notebuf.i = 0 -- brutal hack
+			PurgeNoteBuf(); NewNoteBuf()
+		else
+			m.mItemNew = false
+		end	
+		
+		m.activeEditor = reaper.MIDIEditor_GetActive()
+		if m.activeEditor then
+			m.activeTake = reaper.MIDIEditor_GetTake(m.activeEditor)
+			if m.activeTake then
+				ShowMessage(msgText, 0) -- clear old messages
+				-- check for changes in the active take if the "Permute" scale is selected		
+				if scaleDrop.val2[scaleDrop.val1] == "Permute" then 
+					__, pHash = reaper.MIDI_GetHash(m.activeTake, false, 0)
+					if m.pHash ~= pHash then
+						SetScale("Permute", m.scales, m.preNoteProbTable)
+						UpdateSliderLabels(t_noteSliders, m.preNoteProbTable)
+						m.pHash = pHash
+					end -- m.pHash
+					-- don't allow any note options that might upset permute...
+					noteOptionsCb.val1[2] = 0; m.rndFirstNoteF = false
+					noteOptionsCb.val1[3] = 0; m.rndOctX2F     = false 
+				end -- scaleDrop   
+				-- check for grid changes
+				local grid = m.reaGrid
+				m.reaGrid, __, __ = reaper.MIDI_GetGrid(m.activeTake)
+				if grid ~= m.reaGrid then 
+					GetReaperGrid(seqGridRad)
+					seqGridRad.onLClick() -- update the sequence grid sizes
+				end -- grid
+			else -- handle m.activeTake error
+				ShowMessage(msgText, 1) 
+				m.activeTake = nil
+			end -- m.activeTake
+		else -- handle m.activeEditor error
+			-- pop up error message - switch layer on textbox element
+			ShowMessage(msgText, 1)
+			m.activeEditor = nil
 			m.activeTake = nil
-		end -- m.activeTake
-	else -- handle m.activeEditor error
-		-- pop up error message - switch layer on textbox element
-		ShowMessage(msgText, 1)
-		m.activeEditor = nil
-		m.activeTake = nil
-	end -- m.activeEditor
+		end -- m.activeEditor
+	else
+		ShowMessage(msgText, 2)
+		m.mItem = nil
+	end
 end
 
 --------------------------------------------------------------------------------
